// Core Imports
// NMP Packages Imports
const express = require("express");
const fs = require("fs");
const path = require("path");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const multer = require("multer");
const graphqlHTTP = require("express-graphql").graphqlHTTP;
const cors = require("cors");

// **********************************************************************************
// Custom File Imports
// Utils Import
const UTILS = require("./utils");

// Config Import
const CONFIG = require("./config");

// Response Types
const RESPONSE_TYPES = require("./response-types");

// Routes Imports
const userRoutes = require("./routes/user-routes");
const messageRoutes = require("./routes/message-routes");

// **********************************************************************************
// Controller Imports

// **********************************************************************************
// Middleware Imports
const roleMiddleware = require("./middlewares/role-middleware");
const userMiddleware = require("./middlewares/user-middleware");
const authMiddleware = require("./middlewares/auth-middleware");

// **********************************************************************************
// GraphQL Imports
const graphQLSchema = require("./graphql/schema");
const graphQLResolver = require("./graphql/resolver");

// **********************************************************************************
// creating app instance
const expressApp = express();

// **********************************************************************************
// Configuring Packages
// CORS middleware
expressApp.use(cors());

// bodyParser
expressApp.use(bodyParser.urlencoded({ extended: false }));

// multer
const multerFileStorageConfig = multer.diskStorage({
  destination: (res, file, callback) => {
    callback(null, "images"); // this callback is required to let req continue to next middleware, (first parameter of this callback is an optional error object, throw error if you need or pass null to let request continue, like we did here)
  },
  filename: (res, file, callback) => {
    const random = new Date().toISOString();
    callback(null, random + "-" + file.originalname);
  },
});

// **********************************************************************************
// Adding Middlwares

// test middleware to test if app working fine
// expressApp.use("/test", (req, res, next) => {
//   return res.send("<h1>working</h1>");
// });

// body-parser middleware to add this package functionality
expressApp.use(bodyParser.json());

// multer middleware to add this package functionality
expressApp.use(multer({ storage: multerFileStorageConfig }).single("file")); // here "file" is the file name we will recieve inside req object while processing upload file requests

// site images/static-resources middleware (this will return site static files)
expressApp.use(
  "/images",
  express.static(path.join(__dirname, "public", "images"))
);

// static files (images/videos/files) middleware (this will return uploaded static files)
expressApp.use(
  "/files",
  express.static(path.join(__dirname, "public", "uploaded-files"))
);

// cors headers middleware, this will set any required request headers
expressApp.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "*");
  res.setHeader("Access-Control-Allow-Headers", "*");

  return next();
});

// bypass "Options" http request, to let flow continue to graphql middleware
expressApp.use((req, res, next) => {
  if (req.method == "OPTIONS") {
    return res.sendStatus(200);
  }
  return next();
});

// Checking/Creating Default Roles | Middleware
expressApp.use(roleMiddleware);

// Checking/Creating Default Users | Middleware
expressApp.use(userMiddleware);

// auth middlware
expressApp.use(authMiddleware);

// upload files middleware (to allow files upload)
expressApp.use("/upload-file", (req, res, next) => {
  let error;
  //  check if user is loggedin othervise throw error
  if (!req.isAuth) {
    error = new Error(RESPONSE_TYPES.UNAUTHENTICATED.message);
    error.statusCode = RESPONSE_TYPES.UNAUTHENTICATED.statusCode;
    throw error;
  }
  if (!req.file) {
    // this "req.file" is automated generated by multer package, and by now, file is uploaded in system and this "file" object contains file path in "path" veriable inside it.
    return res.status(RESPONSE_TYPES.INVALID_INPUT.statusCode).json({
      message: RESPONSE_TYPES.INVALID_INPUT.message,
      errors: {
        file: "this is required.",
        oldFilePath:
          "provide old file path, this will save storage space by deleting that file",
      },
      statusCode: RESPONSE_TYPES.INVALID_INPUT.statusCode,
    });
  } else {
    if (req.body.oldFilePath) {
      UTILS.removeImage(req.body.oldFilePath);
    }
    return res.status(RESPONSE_TYPES.SUCCESS.statusCode).json({
      message: RESPONSE_TYPES.SUCCESS.message,
      statusCode: RESPONSE_TYPES.SUCCESS.statusCode,
      filepath: req.file.path,
    });
  }
});

// GraphQL middleware to handle all "Queries/Mutations"
expressApp.use(
  CONFIG.GRAPHQL_URL,
  graphqlHTTP({
    schema: graphQLSchema,
    rootValue: graphQLResolver,
    graphiql: true,
    customFormatErrorFn(err) {
      if (!err.originalError) {
        return err;
      } else {
        const response = {
          errors: err.originalError.errors || [],
          message:
            err.originalError.message ||
            RESPONSE_TYPES.GRAPHQL_DEFAULT_ERROR_RESPONSE.message,
          statusCode:
            err.originalError.statusCode ||
            RESPONSE_TYPES.GRAPHQL_DEFAULT_ERROR_RESPONSE.statusCode,
        };
        return response;
      }
    },
  })
);

// redirecting a GET request with URL "/", on this app to "/graphql" (this will allow user to use GraphQL GUI to play with queries and mutations)
expressApp.use((req, res, next) => {
  if (req.url == "/") {
    return res.redirect(CONFIG.GRAPHQL_URL);
  }
});

// Global Error Handling Middleware (this middleware will handle any error (custom generated error using new Error))
expressApp.use((err, req, res, next) => {
  console.log(`app.js === Global Error Handler Middlware == ${{ err, req }}`);
  let message = RESPONSE_TYPES.GEHM_DEFAULT_RESPONSE.message;
  let statusCode = RESPONSE_TYPES.GEHM_DEFAULT_RESPONSE.statusCode;
  let errors = RESPONSE_TYPES.GEHM_DEFAULT_RESPONSE.errors;
  if (err.message) {
    message = err.message;
  }
  if (err.statusCode) {
    statusCode = err.statusCode;
  }
  if (err.errors) {
    errors = err.errors;
  }
  const response = { message, statusCode, errors };
  return res.status(statusCode).join(response);
});

// **********************************************************************************
// Connecting to MongoDB and Starting Node Server
mongoose
  .connect(CONFIG.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then((res) => {
    // console.log(`app.js === mongoose.connect == success = `, {res});
    console.log(`app.js === mongoose.connect == success`);
    expressApp.listen(CONFIG.SERVER_PORT);
  })
  .catch((err) => {
    console.log(`app.js === mongoose.connect == error = `, { err });
  });
